// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mailing

import (
	"context"
	"sync"
)

// Ensure, that SenderMock does implement Sender.
// If this is not the case, regenerate this file with moq.
var _ Sender = &SenderMock{}

// SenderMock is a mock implementation of Sender.
//
//	func TestSomethingThatUsesSender(t *testing.T) {
//
//		// make and configure a mocked Sender
//		mockedSender := &SenderMock{
//			SendFunc: func(ctx context.Context, to string, subject string, html string, text string) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedSender in code that requires Sender
//		// and then make assertions.
//
//	}
type SenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, to string, subject string, html string, text string) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// To is the to argument value.
			To string
			// Subject is the subject argument value.
			Subject string
			// HTML is the html argument value.
			HTML string
			// Text is the text argument value.
			Text string
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *SenderMock) Send(ctx context.Context, to string, subject string, html string, text string) error {
	callInfo := struct {
		Ctx     context.Context
		To      string
		Subject string
		HTML    string
		Text    string
	}{
		Ctx:     ctx,
		To:      to,
		Subject: subject,
		HTML:    html,
		Text:    text,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	if mock.SendFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SendFunc(ctx, to, subject, html, text)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedSender.SendCalls())
func (mock *SenderMock) SendCalls() []struct {
	Ctx     context.Context
	To      string
	Subject string
	HTML    string
	Text    string
} {
	var calls []struct {
		Ctx     context.Context
		To      string
		Subject string
		HTML    string
		Text    string
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
